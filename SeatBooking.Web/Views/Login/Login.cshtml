@model SeatBooking.Web.Models.LoginViewModel

@{
    ViewData["Title"] = "Login";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-image: url('/images/Desksseats.webp'); /* Ensure the path is correct and uses forward slashes */
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }

        .card {
            width: 360px;
            padding: 40px;
            background-color: rgba(255, 255, 255, 0.9); /* Slightly transparent background */
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
        }

            .form-control:focus {
                border-color: #80bdff;
                outline: 0;
                box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
            }

        .is-invalid {
            border-color: #dc3545;
        }

        .text-danger {
            color: #dc3545;
            font-size: 13px;
            margin-top: 5px;
        }

        .btn-primary {
            width: 100%;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: #fff;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2>Login</h2>
            <form asp-action="Login" method="post" id="loginForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="mb-3">
                    <label asp-for="Username" class="form-label">Username</label>
                    <input asp-for="Username" class="form-control @(ViewData.ModelState["Username"]?.Errors.Any() == true ? "is-invalid" : "")" />
                    <span asp-validation-for="Username" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Password" class="form-label">Password</label>
                    <input asp-for="Password" type="password" class="form-control @(ViewData.ModelState["Password"]?.Errors.Any() == true ? "is-invalid" : "")" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }

        <script>
            document.getElementById("loginForm").addEventListener("submit", function (event) {
                var usernameInput = document.getElementById("Username");
                var passwordInput = document.getElementById("Password");
                var isValid = true;

                // Clear previous error states
                usernameInput.classList.remove("is-invalid");
                passwordInput.classList.remove("is-invalid");

                // Username validation
                if (!usernameInput.value.match(/^[a-zA-Z0-9]+$/)) {
                    usernameInput.classList.add("is-invalid");
                    isValid = false;
                }

                // Password validation
                if (passwordInput.value.length < 8) {
                    passwordInput.classList.add("is-invalid");
                    isValid = false;
                }

                if (!isValid) {
                    event.preventDefault(); // Prevent form submission if validation fails
                }
            });
        </script>
    }
</body>
</html>





















@* @model SeatBooking.Web.Models.LoginViewModel

@{
    ViewData["Title"] = "Login";
    
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #f0f2f5;
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }

        .card {
            width: 360px;
            padding: 40px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
        }

        .form-control:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .is-invalid {
            border-color: #dc3545;
        }

        .text-danger {
            color: #dc3545;
            font-size: 13px;
            margin-top: 5px;
        }

        .btn-primary {
            width: 100%;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: #fff;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2>Login</h2>
            <form asp-action="Login" method="post" id="loginForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="mb-3">
                    <label asp-for="Username" class="form-label">Username</label>
                    <input asp-for="Username" class="form-control @(ViewData.ModelState["Username"]?.Errors.Any() == true ? "is-invalid" : "")" />
                    <span asp-validation-for="Username" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Password" class="form-label">Password</label>
                    <input asp-for="Password" type="password" class="form-control @(ViewData.ModelState["Password"]?.Errors.Any() == true ? "is-invalid" : "")" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }

        <script>
            document.getElementById("loginForm").addEventListener("submit", function (event) {
                var usernameInput = document.getElementById("Username");
                var passwordInput = document.getElementById("Password");
                var isValid = true;

                // Clear previous error states
                usernameInput.classList.remove("is-invalid");
                passwordInput.classList.remove("is-invalid");

                // Username validation
                if (!usernameInput.value.match(/^[a-zA-Z0-9]+$/)) {
                    usernameInput.classList.add("is-invalid");
                    isValid = false;
                }

                // Password validation
                if (passwordInput.value.length < 8) {
                    passwordInput.classList.add("is-invalid");
                    isValid = false;
                }

                if (!isValid) {
                    event.preventDefault(); // Prevent form submission if validation fails
                }
            });
        </script>
    }
</body>
</html>

 *@






























@* @model seatbooking.web.models.loginviewmodel

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>login</title>
    <style>
        body {
            background-color: #f4f4f4;
            font-family: arial, sans-serif;
        }

        .login-container {
            width: 400px;
            margin: 100px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .login-container h2 {
                text-align: center;
                color: #333;
            }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #666;
        }

        input[type="text"],
        input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        button[type="submit"] {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            button[type="submit"]:hover {
                background-color: #0056b3;
            }

        
        }
    </style>
</head>
<body>

    <div class="login-container">
        <h2>login</h2>
        <form method="post">
            <div class="form-group">
                <label for="username">username:</label>
                <input type="text" id="username" name="username" placeholder="enter your username" required pattern="[a-za-z0-9]+" title="username must contain only letters and numbers" />
                @html.validationmessagefor(model => model.username, "", new { @class = "alert" })
            </div>
            <div class="form-group">
                <label for="password">password:</label>
                <input type="password" id="password" name="password" placeholder="enter your password" required minlength="8" title="password must be at least 8 characters long" />
                @html.validationmessagefor(model => model.password, "", new { @class = "alert" })
            </div>
            <button type="submit">login</button>
        </form>

        @if (tempdata["errormessage"] != null)
        {
            <div class="alert">@tempdata["errormessage"]</div>
        }
    </div>

</body>
</html>
 *@